#!/bin/bash

# Breakroom main script

exitcode=0

_success() {
	echo "[*] " "$1" "$2" "$3" "$4" 1>&2
}
_message() {
	echo " .  " "$1" "$2" "$3" "$4" 1>&2
}
_warning() {
	echo "[W] " "$1" "$2" "$3" "$4" 1>&2
}
_verbose() {
	echo "[D] " "$1" "$2" "$3" "$4" 1>&2
}
_error() {
	echo "[!] " "$1" "$2" "$3" "$4" 1>&2
	exitcode=1
}
_failure() {
	echo "[!!] " "$1" "$2" "$3" "$4" 1>&2
	exitcode=1
	exit 1
}

_isnum() {
	case $1 in
		''|*[!0-9]*) return 1 ;;
		*) return 0 ;;
	esac
}

bread=./breakroom-read
if ! [ -r $bread ]; then
	_failure "internal executable ./breakroom-read not found"
fi

_success "Welcome to Breakroom, the Zencode debugger"

bconf=breakroom.conf
_clearconf() {
	cat <<EOF > $bconf
# running breakroom in `pwd`
script=0
conf=0
keys=0
data=0
extra=0
break=0
onfail="trace"
EOF
}
if ! [ -r $bconf ]; then
	_message "Configuration not found, starting new"
	_clearconf
fi

_setconf() {
	k="$1"
	v="$2"
	_message "set" "$k = $v"
	sed -i 's/^'"$k"'.*/'"$k=\"$v\""'/' $bconf
}
_setjson() {
	key="$1"
	val="$2"
	if ! [ -r "$val" ]; then
		_error "JSON file not found: $val"
		return; fi
	cat $val | jq . 1>/dev/null
	if ! [ $? = 0 ]; then
		_error "Invalid JSON format for ${name}"
	else
		_setconf "$key" "$val"
	fi
}

if [ -r "${1}" ]; then
	_setconf script ${1}
	[ -r "${2}" ] && _setconf keys "${2}"
	[ -r "${3}" ] && _setconf data "${3}"
	[ -r "${4}" ] && _setconf extra "${4}"
fi
if [ "$1" = "-h" ]; then
	_message "Command synopsis:"
	_message "  breakroom [ ⚡zencode ] [ 🔡data ] [ 🔢keys ] [ 🔣extra ]"
	_message "Interactive console usage commands:"
	_message " run   ▶️ execute the current zencode configuration"
	_message " list  📃 show the current zencode script and breakpoints"
	_message " clear 🧹 reset all the breakroom configuration"
	_message " trace 🧭 show the backtrace of current execution"
	_message " heap  💾 show the HEAP of current execution"
	_message " codec 🗃️ show the CODEC of Given scope execution"
	_message " auto  ♻️  onitor zencode and re-run on modifications"
	_message " script [file] ⚡ get/set the zencode script file"
	_message " data   [file] 🔡 get/set the data JSON input file"
	_message " keys   [file] 🔢 get/set the keys JSON input file"
	_message " extra  [file] 🔣 get/set the extra JSON input file"
	_message " conf [string] 🔤 get/set the zenroom conf string"
	_message " break [int]   🚫 set a breakpoint at line number"
	exit 0
fi

# Show current configuration
cat $bconf | grep -v '=0$'

_getJ64() {
	what="$1"
	if ! [ -r breakroom.exec.stderr ]; then
		_error "Stderr execution log not found"
	else
		_message "$what:"
		awk '/J64 '"$what"':/ {print(substr($3,1,length($3)-2))}' \
			breakroom.exec.stderr | base64 -d | jq .
	fi
}
_getscript() {
	if ! [ -r ${script} ]; then
		_error "Script file not found: $script"; continue
	fi
	if ! [ $break ]; then
		cat -n $script
	else
		cat -n $script | awk '
{ if($1=="'"$break"'") printf "->%s\n",$0; else print $0 }'
	fi
}

_execute() {
	command -v zencode-exec
	if [ $? != 0 ]; then
		_error "zencode-exec not found in PATH"; return
	fi
	. ./$bconf
	xconf=""
	if [ "$conf" != "0" ]; then xconf="$conf"; fi
	if [ "$1" != "" ]; then	xconf="$xconf,$1"; fi
	# create zencode-exec execution input
	bexec=breakroom.exec
	echo "${xconf}" > $bexec
	bscript=`mktemp`
	cat $script > $bscript
	if ! [ $break = 0 ]; then
		head -n $break $script > $bscript
		echo "and break" >> $bscript
	fi
	cat "$bscript" | base64 -w0 >> $bexec
	echo >> $bexec
	if [ -r "$keys" ]; then cat "$keys" | base64 -w0 >> $bexec; fi
	echo >> $bexec
	if [ -r "$data" ]; then cat "$data" | base64 -w0 >> $bexec; fi
	echo >> $bexec
	if [ -r "$extra" ]; then cat "$extra" | base64 -w0 >> $bexec; fi
	echo >> $bexec
	echo >> $bexec # context
	cat $bexec | zencode-exec \
					 1> breakroom.exec.stdout 2> breakroom.exec.stderr
	if [ $? = 0 ]; then
		cat breakroom.exec.stdout | jq .
		_success "Execution succesful"
		return 0
	else
		cat breakroom.exec.stderr | grep -v "^\"J64"
		_error "Failed execution"
		_getJ64 "TRACE"
		return 1
	fi
}

if [ "$1" = "run" ]; then
	_execute
	exit $?
fi

tcmd=`mktemp`
while true; do
	# read command from prompt
	$bread 2> $tcmd
	if [ $? = 1 ]; then
		_message "Exit breakroom"
		break; fi
	bline=`cat $tcmd`
	if [ "$bline" = "" ]; then continue; fi
	bcmd=`echo $bline | cut -d' ' -f1`
	bval=`echo $bline | cut -d' ' -f2`
	# load configuration
	. ./$bconf
	if [ "$bval" = "(null)" ]; then
		# GET
		case "$bcmd" in
			script|list)
				_getscript ;;
			keys)
				if ! [ -r ${keys} ]; then
					_error "Keys file not found: $keys"; continue
				fi
				cat ${keys} | jq . ;;
			data)
				if ! [ -r ${data} ]; then
					_error "Data file not found: $data"; continue
				fi
				cat ${data} | jq . ;;
			extra)
				if ! [ -r ${extra} ]; then
					_error "Extra file not found: $extra"; continue
				fi
				cat ${extra} | jq . ;;
			conf)
				cat $bconf ;;
			clear)
				_clearconf
				# _setconf "break" 0
				;;
			run)
				_execute ;;
			trace|bt)
				_getJ64 TRACE
				;;
			heap)
				_getJ64 HEAP
				;;
			codec|schema|given)
				_execute "scope=given"
				;;
			auto)
				if ! command -v inotifywait; then
					_error "Cannot find inotify-tools for auto mode"
					continue
				fi
				tscript="$script"; [ $tscript = 0 ] && tscript=""
				tdata="$data"; [ $tdata = 0 ] && tdata=""
				tkeys="$keys"; [ $tkeys = 0 ] && tkeys=""
				textra="$extra"; [ $textra = 0 ] && textra=""
				while true; do
					_success "AUTO mode: autorun on zencode changes"
					inotifywait -q \
						-e modify \
						"${tscript}" "${tdata}" "${tkeys}" "${textra}"
					_execute
				done
				;;
		esac
	else
		# SET
		case "$bcmd" in
			script)
				if ! [ -r ${bval} ]; then
					_error "Script file not found: $bval"; continue
				fi
				_setconf "$bcmd" "$bval" ;;
			keys)
				if ! [ -r ${bval} ]; then
					_error "Keys file not found: $bval"; continue
				fi
				_setjson "keys" "$bval" ;;
			data)
				if ! [ -r ${bval} ]; then
					_error "Data file not found: $bval"; continue
				fi
				_setjson "data" "$bval" ;;
			extra)
				if ! [ -r ${bval} ]; then
					_error "Extra file not found: $bval"; continue
				fi
				_setjson "extra" "$bval" ;;
			conf)
				_setconf "$bcmd" "$bval" ;;
			"break")
				if _isnum $bval; then
					_setconf "$bcmd" "$bval"
					break="$bval"
				else _error "Invalid Break line number: $bval"
				fi
				_getscript ;;
		esac
	fi # end GET/SET
done

rm -f $tcmd
